// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalcLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly MUL = 17;
	public static readonly DIV = 18;
	public static readonly ADD = 19;
	public static readonly SUB = 20;
	public static readonly REMAIN = 21;
	public static readonly EQUAL = 22;
	public static readonly NOT_EQUAL = 23;
	public static readonly GREATER_THAN = 24;
	public static readonly LESS_THAN = 25;
	public static readonly GREATER_OR_EQUAL = 26;
	public static readonly LESS_OR_EQUAL = 27;
	public static readonly NOT = 28;
	public static readonly ADDRESS = 29;
	public static readonly AND = 30;
	public static readonly OR = 31;
	public static readonly INT = 32;
	public static readonly CHAR = 33;
	public static readonly FLOAT = 34;
	public static readonly WHITESPACE = 35;
	public static readonly VOID = 36;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "MUL", "DIV", 
		"ADD", "SUB", "REMAIN", "EQUAL", "NOT_EQUAL", "GREATER_THAN", "LESS_THAN", 
		"GREATER_OR_EQUAL", "LESS_OR_EQUAL", "NOT", "ADDRESS", "AND", "OR", "INT", 
		"CHAR", "FLOAT", "WHITESPACE", "VOID",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "';'", "'='", "'('", "')'", "'_'", "'{'", "'}'", "'while ('", 
		"'if ('", "'else'", "'return'", "'return;'", "'continue;'", "'break;'", 
		"'(void);'", "');'", "'*'", "'/'", "'+'", "'-'", "'%'", "'=='", "'!='", 
		"'>'", "'<'", "'>='", "'<='", "'!'", "'&'", "'&&'", "'||'", undefined, 
		undefined, undefined, undefined, "'void'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "MUL", "DIV", "ADD", "SUB", "REMAIN", 
		"EQUAL", "NOT_EQUAL", "GREATER_THAN", "LESS_THAN", "GREATER_OR_EQUAL", 
		"LESS_OR_EQUAL", "NOT", "ADDRESS", "AND", "OR", "INT", "CHAR", "FLOAT", 
		"WHITESPACE", "VOID",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalcLexer._LITERAL_NAMES, CalcLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalcLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalcLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calc.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalcLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalcLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalcLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalcLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02&\xDB\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13" +
		"\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17" +
		"\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B" +
		"\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E" +
		"\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03!\x06!\xBC\n!\r!\x0E!\xBD\x03" +
		"\"\x06\"\xC1\n\"\r\"\x0E\"\xC2\x03#\x06#\xC6\n#\r#\x0E#\xC7\x03#\x03#" +
		"\x06#\xCC\n#\r#\x0E#\xCD\x03$\x06$\xD1\n$\r$\x0E$\xD2\x03$\x03$\x03%\x03" +
		"%\x03%\x03%\x03%\x02\x02\x02&\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02" +
		"\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02" +
		"\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%" +
		"\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B" +
		"5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02" +
		"%I\x02&\x03\x02\x05\x03\x022;\x05\x02\"\"C\\c|\x05\x02\v\f\x0F\x0F\"\"" +
		"\x02\xDF\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02" +
		"\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
		"\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02" +
		"\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03" +
		"\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02" +
		"\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02" +
		";\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02" +
		"\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02" +
		"\x02I\x03\x02\x02\x02\x03K\x03\x02\x02\x02\x05M\x03\x02\x02\x02\x07O\x03" +
		"\x02\x02\x02\tQ\x03\x02\x02\x02\vS\x03\x02\x02\x02\rU\x03\x02\x02\x02" +
		"\x0FW\x03\x02\x02\x02\x11Y\x03\x02\x02\x02\x13a\x03\x02\x02\x02\x15f\x03" +
		"\x02\x02\x02\x17k\x03\x02\x02\x02\x19r\x03\x02\x02\x02\x1Bz\x03\x02\x02" +
		"\x02\x1D\x84\x03\x02\x02\x02\x1F\x8B\x03\x02\x02\x02!\x93\x03\x02\x02" +
		"\x02#\x96\x03\x02\x02\x02%\x98\x03\x02\x02\x02\'\x9A\x03\x02\x02\x02)" +
		"\x9C\x03\x02\x02\x02+\x9E\x03\x02\x02\x02-\xA0\x03\x02\x02\x02/\xA3\x03" +
		"\x02\x02\x021\xA6\x03\x02\x02\x023\xA8\x03\x02\x02\x025\xAA\x03\x02\x02" +
		"\x027\xAD\x03\x02\x02\x029\xB0\x03\x02\x02\x02;\xB2\x03\x02\x02\x02=\xB4" +
		"\x03\x02\x02\x02?\xB7\x03\x02\x02\x02A\xBB\x03\x02\x02\x02C\xC0\x03\x02" +
		"\x02\x02E\xC5\x03\x02\x02\x02G\xD0\x03\x02\x02\x02I\xD6\x03\x02\x02\x02" +
		"KL\x07=\x02\x02L\x04\x03\x02\x02\x02MN\x07?\x02\x02N\x06\x03\x02\x02\x02" +
		"OP\x07*\x02\x02P\b\x03\x02\x02\x02QR\x07+\x02\x02R\n\x03\x02\x02\x02S" +
		"T\x07a\x02\x02T\f\x03\x02\x02\x02UV\x07}\x02\x02V\x0E\x03\x02\x02\x02" +
		"WX\x07\x7F\x02\x02X\x10\x03\x02\x02\x02YZ\x07y\x02\x02Z[\x07j\x02\x02" +
		"[\\\x07k\x02\x02\\]\x07n\x02\x02]^\x07g\x02\x02^_\x07\"\x02\x02_`\x07" +
		"*\x02\x02`\x12\x03\x02\x02\x02ab\x07k\x02\x02bc\x07h\x02\x02cd\x07\"\x02" +
		"\x02de\x07*\x02\x02e\x14\x03\x02\x02\x02fg\x07g\x02\x02gh\x07n\x02\x02" +
		"hi\x07u\x02\x02ij\x07g\x02\x02j\x16\x03\x02\x02\x02kl\x07t\x02\x02lm\x07" +
		"g\x02\x02mn\x07v\x02\x02no\x07w\x02\x02op\x07t\x02\x02pq\x07p\x02\x02" +
		"q\x18\x03\x02\x02\x02rs\x07t\x02\x02st\x07g\x02\x02tu\x07v\x02\x02uv\x07" +
		"w\x02\x02vw\x07t\x02\x02wx\x07p\x02\x02xy\x07=\x02\x02y\x1A\x03\x02\x02" +
		"\x02z{\x07e\x02\x02{|\x07q\x02\x02|}\x07p\x02\x02}~\x07v\x02\x02~\x7F" +
		"\x07k\x02\x02\x7F\x80\x07p\x02\x02\x80\x81\x07w\x02\x02\x81\x82\x07g\x02" +
		"\x02\x82\x83\x07=\x02\x02\x83\x1C\x03\x02\x02\x02\x84\x85\x07d\x02\x02" +
		"\x85\x86\x07t\x02\x02\x86\x87\x07g\x02\x02\x87\x88\x07c\x02\x02\x88\x89" +
		"\x07m\x02\x02\x89\x8A\x07=\x02\x02\x8A\x1E\x03\x02\x02\x02\x8B\x8C\x07" +
		"*\x02\x02\x8C\x8D\x07x\x02\x02\x8D\x8E\x07q\x02\x02\x8E\x8F\x07k\x02\x02" +
		"\x8F\x90\x07f\x02\x02\x90\x91\x07+\x02\x02\x91\x92\x07=\x02\x02\x92 \x03" +
		"\x02\x02\x02\x93\x94\x07+\x02\x02\x94\x95\x07=\x02\x02\x95\"\x03\x02\x02" +
		"\x02\x96\x97\x07,\x02\x02\x97$\x03\x02\x02\x02\x98\x99\x071\x02\x02\x99" +
		"&\x03\x02\x02\x02\x9A\x9B\x07-\x02\x02\x9B(\x03\x02\x02\x02\x9C\x9D\x07" +
		"/\x02\x02\x9D*\x03\x02\x02\x02\x9E\x9F\x07\'\x02\x02\x9F,\x03\x02\x02" +
		"\x02\xA0\xA1\x07?\x02\x02\xA1\xA2\x07?\x02\x02\xA2.\x03\x02\x02\x02\xA3" +
		"\xA4\x07#\x02\x02\xA4\xA5\x07?\x02\x02\xA50\x03\x02\x02\x02\xA6\xA7\x07" +
		"@\x02\x02\xA72\x03\x02\x02\x02\xA8\xA9\x07>\x02\x02\xA94\x03\x02\x02\x02" +
		"\xAA\xAB\x07@\x02\x02\xAB\xAC\x07?\x02\x02\xAC6\x03\x02\x02\x02\xAD\xAE" +
		"\x07>\x02\x02\xAE\xAF\x07?\x02\x02\xAF8\x03\x02\x02\x02\xB0\xB1\x07#\x02" +
		"\x02\xB1:\x03\x02\x02\x02\xB2\xB3\x07(\x02\x02\xB3<\x03\x02\x02\x02\xB4" +
		"\xB5\x07(\x02\x02\xB5\xB6\x07(\x02\x02\xB6>\x03\x02\x02\x02\xB7\xB8\x07" +
		"~\x02\x02\xB8\xB9\x07~\x02\x02\xB9@\x03\x02\x02\x02\xBA\xBC\t\x02\x02" +
		"\x02\xBB\xBA\x03\x02\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\xBB\x03\x02\x02" +
		"\x02\xBD\xBE\x03\x02\x02\x02\xBEB\x03\x02\x02\x02\xBF\xC1\t\x03\x02\x02" +
		"\xC0\xBF\x03\x02\x02\x02\xC1\xC2\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02" +
		"\xC2\xC3\x03\x02\x02\x02\xC3D\x03\x02\x02\x02\xC4\xC6\x05A!\x02\xC5\xC4" +
		"\x03\x02\x02\x02\xC6\xC7\x03\x02\x02\x02\xC7\xC5\x03\x02\x02\x02\xC7\xC8" +
		"\x03\x02\x02\x02\xC8\xC9\x03\x02\x02\x02\xC9\xCB\x070\x02\x02\xCA\xCC" +
		"\x05A!\x02\xCB\xCA\x03\x02\x02\x02\xCC\xCD\x03\x02\x02\x02\xCD\xCB\x03" +
		"\x02\x02\x02\xCD\xCE\x03\x02\x02\x02\xCEF\x03\x02\x02\x02\xCF\xD1\t\x04" +
		"\x02\x02\xD0\xCF\x03\x02\x02\x02\xD1\xD2\x03\x02\x02\x02\xD2\xD0\x03\x02" +
		"\x02\x02\xD2\xD3\x03\x02\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4\xD5\b$\x02" +
		"\x02\xD5H\x03\x02\x02\x02\xD6\xD7\x07x\x02\x02\xD7\xD8\x07q\x02\x02\xD8" +
		"\xD9\x07k\x02\x02\xD9\xDA\x07f\x02\x02\xDAJ\x03\x02\x02\x02\b\x02\xBD" +
		"\xC2\xC7\xCD\xD2\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalcLexer.__ATN) {
			CalcLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalcLexer._serializedATN));
		}

		return CalcLexer.__ATN;
	}

}

